pub trait Processor<Q, R> {
    //! 何らかのリクエストを受け取って何らかのレスポンスを返す処理を、
    //! 引数と戻り値の型修飾(所有権か参照か)の組み合わせを複数示し、その意味と用途を解説する。
    //!
    //! ## 引数
    //! * 引数は、参照で受け取る場合が多い。
    //! * 引数を呼び出し元で再利用させたくない場合は、引数で所有権を要求する。
    //! ## 戻り値
    //! * 新たに生成するオブジェクトを含めるなら、呼び出し元に所有権を返す必要がある。
    //!   そのため、戻り値を参照にはできない。
    //! * 呼び出し元に所有権がある物をポイントするだけの関数は、参照を返す。
    //! * 新たにオブジェクトを生成するのではなく、
    //!   呼び出し元の用意したメモリ領域を書き換えたい場合は、
    //!   戻り値ではなく可変参照(&mut)を引数として受け取るようにする。

    /// リクエストの情報を元に、レスポンスを新たに生成して返す。
    ///
    /// 引数を参照で受け取り、戻り値を所有権で返すパターンを基本として考えるとよい。
    fn process_0(req: &Q) -> R;

    /// リクエストを回収し、レスポンスを新たに生成して返す。
    ///
    /// 引数として与えられたリクエストは、呼び出し元では使えなくなるため、
    /// 再利用できないリクエストオブジェクトを扱うときに使う。
    fn process_1(req: Q) -> R;

    /// リクエストに含まれる情報をレスポンスとして返す。
    ///
    /// レスポンスは、リクエストで与えられた範囲の情報しか返せない。
    /// 引数に与えられたオブジェクトから何らかの要素を抜き出すような処理に使う。
    /// 新たに生成したものを戻り値に含めることはできない。
    fn process_2(req: &Q) -> &R;

    /// リクエストを回収し、静的な情報をレスポンスとして返す。
    ///
    /// リクエストはこの関数が戻るときに消えてしまうため、
    /// レスポンスにリクエストの情報を含めることができない上、
    /// 新たに生成したオブジェクトも含めることはできない。
    /// したがって、レスポンスには静的な情報を返すしかない。
    /// このような関数はあまり意味がない場合が多い。
    fn process_3(req: Q) -> &'static R;

    /// リクエストを参照し、与えられたレスポンス領域を書き換える。
    ///
    /// レスポンスの情報を書き込む領域を、呼び出し元から指示したい場合に使う。
    fn process_4(req: &Q, res: &mut R);
}
